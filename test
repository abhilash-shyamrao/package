#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <errno.h>

#define SEED_FILE "_seed_.txt"
#define CRASH_FILE_PREFIX "prog.crash_"
#define MUTATION_CHANCE 0.13
#define EXTEND_INTERVAL 500
#define EXTEND_BYTES 10

void load_seed(const char *filename, unsigned char **data, size_t *size) {
    FILE *file = fopen(filename, "rb");
    if (!file) {
        perror("Error opening seed file");
        fprintf(stderr, "Expected file: %s in the current directory.\n", filename);
        exit(EXIT_FAILURE);
    }

    fseek(file, 0, SEEK_END);
    *size = ftell(file);  // Get the file size
    rewind(file);

    if (*size == 0) {
        fprintf(stderr, "Error: Seed file '%s' is empty. File size: %zu bytes.\n", filename, *size);
        fclose(file);
        exit(EXIT_FAILURE);
    }

    printf("Debug: Seed file '%s' loaded successfully. Size: %zu bytes.\n", filename, *size);

    *data = (unsigned char *)malloc(*size);
    if (!*data) {
        perror("Error allocating memory for seed data");
        fclose(file);
        exit(EXIT_FAILURE);
    }

    fread(*data, 1, *size, file);
    fclose(file);
}

void mutate(unsigned char **data, size_t *size, unsigned int seed, int iterations) {
    srand(seed);

    for (int i = 0; i < iterations; i++) {
        for (size_t j = 0; j < *size; j++) {
            if ((double)rand() / RAND_MAX < MUTATION_CHANCE) {
                (*data)[j] = (unsigned char)(rand() % 256);
            }
        }

        if ((i + 1) % EXTEND_INTERVAL == 0) {
            *data = (unsigned char *)realloc(*data, *size + EXTEND_BYTES);
            if (!*data) {
                perror("Error reallocating memory for mutation");
                exit(EXIT_FAILURE);
            }
            for (int k = 0; k < EXTEND_BYTES; k++) {
                (*data)[*size + k] = (unsigned char)(rand() % 256);
            }
            *size += EXTEND_BYTES;
        }
    }
}

int execute_program(unsigned char *data, size_t size) {
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        perror("Error creating pipe");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("Error forking process");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // Child process: execute the program
        close(pipefd[1]);
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);

        execl("./prog", "./prog", NULL);
        perror("Error executing program");
        exit(EXIT_FAILURE);
    } else {
        // Parent process: send input data
        close(pipefd[0]);
        write(pipefd[1], data, size);
        close(pipefd[1]);

        int status;
        waitpid(pid, &status, 0);
        if (WIFSIGNALED(status) && WTERMSIG(status) == SIGSEGV) {
            return 139; // Segmentation fault
        }
        return WEXITSTATUS(status);
    }
}

void save_crash_data(unsigned char *data, size_t size) {
    char filename[256];
    time_t now = time(NULL);
    struct tm *t = localtime(&now);
    strftime(filename, sizeof(filename), CRASH_FILE_PREFIX "%Y-%m-%d_%H-%M-%S", t);

    FILE *file = fopen(filename, "wb");
    if (!file) {
        perror("Error saving crash data");
        exit(EXIT_FAILURE);
    }

    fwrite(data, 1, size, file);
    fclose(file);

    printf("Crash input saved to %s\n", filename);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <prng_seed> <num_iterations>\n", argv[0]);
        return EXIT_FAILURE;
    }

    unsigned int prng_seed = atoi(argv[1]);
    int num_iterations = atoi(argv[2]);

    if (access("./prog", X_OK) != 0) {
        fprintf(stderr, "Error: Target program './prog' not found or not executable\n");
        return EXIT_FAILURE;
    }

    unsigned char *seed_data;
    size_t seed_size;

    load_seed(SEED_FILE, &seed_data, &seed_size);

    for (int i = 0; i < num_iterations; i++) {
        unsigned char *mutated_data = (unsigned char *)malloc(seed_size);
        memcpy(mutated_data, seed_data, seed_size);
        size_t mutated_size = seed_size;

        mutate(&mutated_data, &mutated_size, prng_seed, i + 1);
        int exit_code = execute_program(mutated_data, mutated_size);

        if (exit_code == 139) {
            printf("Crash detected on iteration %d\n", i + 1);
            save_crash_data(mutated_data, mutated_size);
            free(mutated_data);
            break;
        }

        free(mutated_data);
    }

    free(seed_data);
    return EXIT_SUCCESS;
}
