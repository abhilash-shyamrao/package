CREATE OR REPLACE FUNCTION log_unified_view_changes()
RETURNS TRIGGER AS $$
DECLARE
    transaction_id UUID := gen_random_uuid();  -- Generate a unique transaction ID
    first_column TEXT;  -- Variable to store the name of the first column
    row_id TEXT;  -- Variable to store the row's unique identifier
BEGIN
    -- Retrieve the name of the first column (primary key or first column in the table)
    SELECT column_name
    INTO first_column
    FROM information_schema.columns
    WHERE table_name = TG_TABLE_NAME
    ORDER BY ordinal_position
    LIMIT 1;

    -- For UPDATE or DELETE operations, use OLD for row_id
    IF TG_OP IN ('UPDATE', 'DELETE') THEN
        -- Dynamically access the first column from OLD record
        row_id := (OLD).first_column::TEXT;  -- This directly accesses the first column
    END IF;

    -- For INSERT operation, use NEW for row_id
    IF TG_OP = 'INSERT' THEN
        -- Dynamically access the first column from NEW record
        row_id := (NEW).first_column::TEXT;  -- This directly accesses the first column
    END IF;

    IF TG_OP = 'UPDATE' THEN
        -- Log each column where values changed
        INSERT INTO dqc_schema.audit_log (transaction_id, table_name, row_identifier, column_name, old_value, new_value, changed_on, changed_by)
        SELECT
            transaction_id,
            TG_TABLE_NAME,
            row_id,  -- Use the first column value as the unique row identifier
            col.column_name,  -- Column name that changed
            to_jsonb(OLD.*)::jsonb -> col.column_name, -- Old value
            to_jsonb(NEW.*)::jsonb -> col.column_name, -- New value
            NOW(),
            CURRENT_USER
        FROM (
            SELECT unnest(array(SELECT column_name FROM information_schema.columns 
                                WHERE table_name = TG_TABLE_NAME)) AS column_name
        ) AS col
        WHERE to_jsonb(OLD.*)::jsonb -> col.column_name IS DISTINCT FROM to_jsonb(NEW.*)::jsonb -> col.column_name;

    ELSIF TG_OP = 'DELETE' THEN
        -- Log the deleted row
        INSERT INTO dqc_schema.audit_log (transaction_id, table_name, row_identifier, column_name, old_value, new_value, changed_on, changed_by)
        VALUES (
            transaction_id,
            TG_TABLE_NAME,
            row_id,  -- Use the first column value as the unique row identifier
            NULL,
            row_to_json(OLD)::jsonb, -- Store the entire deleted row
            NULL,
            NOW(),
            CURRENT_USER
        );

    ELSIF TG_OP = 'INSERT' THEN
        -- Log the inserted row
        INSERT INTO dqc_schema.audit_log (transaction_id, table_name, row_identifier, column_name, old_value, new_value, changed_on, changed_by)
        VALUES (
            transaction_id,
            TG_TABLE_NAME,
            row_id,  -- Use the first column value as the unique row identifier
            NULL,
            NULL,
            row_to_json(NEW)::jsonb, -- Store the entire inserted row
            NOW(),
            CURRENT_USER
        );
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
