import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { vi } from 'vitest';
import ReportingGroup from './ReportingGroup';
import { MetadataService } from '../../../../services/MetadataService/MetadataService';

// Mock dependencies
vi.mock('@okta/okta-react', () => ({
  useOktaAuth: () => ({
    authState: { token: 'test' }
  })
}));

vi.mock('../../../CronSchedule/CronSchedule', () => ({
  default: () => <div>CronSchedule Component</div>
}));

describe('ReportingGroup Component', () => {
  beforeEach(() => {
    vi.resetAllMocks();
    vi.spyOn(MetadataService, 'getLobs').mockResolvedValue(['vgi-platform-int']);
    vi.spyOn(MetadataService, 'getRegions').mockResolvedValue(['us-east-1']);
  });

  test('renders without crashing', async () => {
    render(<ReportingGroup />);
    await waitFor(() => {
      expect(screen.getByText('Reporting Group')).toBeDefined();
      expect(screen.getByText('CronSchedule Component')).toBeDefined();
    });
  });

  test('should initialize with correct initial state', () => {
    const { container } = render(<ReportingGroup />);
    const nameInput = container.querySelector('#name') as HTMLInputElement;
    const descriptionInput = container.querySelector('#description') as HTMLInputElement;
    expect(nameInput.value).toBe('');  // Expect initial value to be empty
    expect(descriptionInput.value).toBe('');  // Expect initial value to be empty
  });

  test('should handle value change when name is updated', async () => {
    const { container } = render(<ReportingGroup />);
    const nameInput = container.querySelector('#name') as any;
    await userEvent.type(nameInput, 'Test name[Tab]');
    expect(nameInput.value).toBe('Test name');
  });

  test('should handle value change when description is updated', async () => {
    const { container } = render(<ReportingGroup />);
    const descriptionInput = container.querySelector('#description') as any;
    await userEvent.type(descriptionInput, 'Test description[Tab]');
    expect(descriptionInput.value).toBe('Test description');
  });

  test('should trigger onBlurChange when inputs lose focus', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    
    const nameInput = container.querySelector('#name') as HTMLInputElement;
    await userEvent.type(nameInput, 'New name');
    nameInput.blur();  // Trigger onBlurChange by losing focus
    
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      name: 'New name'
    }));
  });

  test('should handle access role dropdown change', async () => {
    const { container } = render(<ReportingGroup />);
    const typeDropdown = container.querySelector('#lob div[class*=-control]') as any;
    await userEvent.click(typeDropdown);
    const typeOption = container.querySelectorAll('div[class*=-option]') as any;
    await userEvent.click(typeOption[0]);
    expect(typeOption[0].innerHTML).toBe('vgi-platform-int');
  });

  test('should handle region dropdown change', async () => {
    const { container } = render(<ReportingGroup />);
    const typeDropdown = container.querySelector('#region div[class*=-control]') as any;
    await userEvent.click(typeDropdown);
    const typeOption = container.querySelectorAll('div[class*=-option]') as any;
    await userEvent.click(typeOption[0]);
    expect(typeOption[0].innerHTML).toBe('us-east-1');
  });

  test('should handle empty lists from MetadataService', async () => {
    vi.spyOn(MetadataService, 'getLobs').mockResolvedValue([]);
    vi.spyOn(MetadataService, 'getRegions').mockResolvedValue([]);
    render(<ReportingGroup />);
    
    await waitFor(() => {
      const lobDropdown = screen.queryByText('Select line of business');
      const regionDropdown = screen.queryByText('Select region');
      expect(lobDropdown).toBeDefined();
      expect(regionDropdown).toBeDefined();
    });
  });

  test('should handle error in MetadataService', async () => {
    vi.spyOn(MetadataService, 'getLobs').mockRejectedValue(new Error('Error fetching lobs'));
    vi.spyOn(MetadataService, 'getRegions').mockRejectedValue(new Error('Error fetching regions'));

    render(<ReportingGroup />);

    await waitFor(() => {
      // Test that it doesn't crash and handles error gracefully
      expect(screen.queryByText('Select line of business')).toBeNull();
      expect(screen.queryByText('Select region')).toBeNull();
    });
  });
});
