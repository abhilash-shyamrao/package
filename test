#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define APPEND_INTERVAL 500
#define APPEND_SIZE 10

void mutate_input(unsigned char *input, size_t size, int iterations, unsigned int prng_seed) {
    srand(prng_seed);
    for (int iteration = 0; iteration < iterations; iteration++) {
        // Mutate with 13% probability
        for (size_t i = 0; i < size; i++) {
            if (rand() % 100 < 13) {
                input[i] = rand() % 256;
            }
        }
        // Append random bytes every 500 iterations
        if ((iteration + 1) % APPEND_INTERVAL == 0) {
            for (int j = 0; j < APPEND_SIZE; j++) {
                input[size++] = rand() % 256;
            }
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: ./fuzzer <prng_seed> <num_iterations>\n");
        return 1;
    }

    unsigned int prng_seed = atoi(argv[1]);
    int num_iterations = atoi(argv[2]);

    // Read seed file
    FILE *seed_file = fopen("_seed_", "rb");
    if (!seed_file) {
        perror("Failed to open seed file");
        return 1;
    }
    fseek(seed_file, 0, SEEK_END);
    size_t seed_size = ftell(seed_file);
    fseek(seed_file, 0, SEEK_SET);
    unsigned char *seed_data = malloc(seed_size + APPEND_INTERVAL * APPEND_SIZE);
    fread(seed_data, 1, seed_size, seed_file);
    fclose(seed_file);

    // Mutate seed
    mutate_input(seed_data, seed_size, num_iterations, prng_seed);

    // Write mutated input to stdout
    fwrite(seed_data, 1, seed_size, stdout);

    free(seed_data);
    return 0;
}

