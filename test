// ReportingGroup.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import ReportingGroup from './ReportingGroup';
import { useOktaAuth } from '@okta/okta-react';
import MetadataService from '../../../services/MetadataService';
import AppUtils from '../../../utils/AppUtils/AppUtils';

jest.mock('@okta/okta-react');
jest.mock('../../../services/MetadataService');
jest.mock('../../../utils/AppUtils/AppUtils');
jest.mock('../../../CronSchedule/CronSchedule', () => () => <div>CronSchedule Component</div>);

describe('ReportingGroup Component', () => {
  beforeEach(() => {
    // Mock the useOktaAuth hook
    (useOktaAuth as jest.Mock).mockReturnValue({
      authState: {
        isAuthenticated: true,
      },
    });

    // Mock the MetadataService methods
    (MetadataService.getLobs as jest.Mock).mockResolvedValue([
      { id: 'lob1', name: 'LOB 1' },
      { id: 'lob2', name: 'LOB 2' },
    ]);

    (MetadataService.getRegions as jest.Mock).mockResolvedValue([
      { id: 'region1', name: 'Region 1' },
      { id: 'region2', name: 'Region 2' },
    ]);

    // Mock the AppUtils.toSelectMap function
    (AppUtils.toSelectMap as jest.Mock).mockImplementation((list) =>
      list.map((item: any) => ({ value: item.id, label: item.name }))
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should select reporting groups navigation option', async () => {
    render(<ReportingGroup />);

    // Wait for data fetching to complete
    await waitFor(() => expect(MetadataService.getLobs).toHaveBeenCalled());

    // If there is a navigation option within ReportingGroup
    const navOption = screen.getByText('Reporting Group');
    fireEvent.click(navOption);

    // Verify that the correct content is displayed
    expect(screen.getByText('Enter a reporting group name that is unique and descriptive')).toBeInTheDocument();
  });

  test('should go to next step', async () => {
    render(<ReportingGroup />);

    // Wait for data fetching to complete
    await waitFor(() => expect(MetadataService.getLobs).toHaveBeenCalled());

    // Simulate filling out the form
    fireEvent.blur(screen.getByLabelText('Name'), { target: { value: 'Test Group' } });
    fireEvent.blur(screen.getByLabelText('Email List'), { target: { value: 'user@example.com' } });

    // Simulate selecting 'Active' status
    fireEvent.click(screen.getByLabelText('Active'));

    // Simulate clicking the 'Next' button if it exists
    const nextButton = screen.getByText('Next');
    fireEvent.click(nextButton);

    // Verify that the next step content is displayed
    expect(screen.getByText('Next Step Content')).toBeInTheDocument();
  });
});
