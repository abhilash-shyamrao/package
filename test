// ReportingGroup.test.tsx

import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { vi } from 'vitest';
import '@testing-library/jest-dom';
import ReportingGroup from './ReportingGroup';

// Mock useOktaAuth
vi.mock('@okta/okta-react', () => ({
  useOktaAuth: () => ({
    authState: {
      isAuthenticated: true,
      accessToken: 'mockAccessToken',
    },
  }),
}));

// Mock MetadataService
vi.mock('../../../services/MetadataService', () => ({
  default: {
    getLobs: vi.fn(),
    getRegions: vi.fn(),
  },
}));

// Mock AppUtils
vi.mock('../../../utils/AppUtils/AppUtils', () => ({
  default: {
    toSelectMap: vi.fn(),
  },
}));

// Mock Select component from react-select
vi.mock('react-select', () => ({
  __esModule: true,
  default: ({ options, onChange, placeholder }) => (
    <select
      data-testid="select"
      onChange={(e) => onChange({ value: e.target.value, label: e.target.value })}
    >
      <option value="">{placeholder}</option>
      {options.map((option) => (
        <option key={option.value} value={option.value}>
          {option.label}
        </option>
      ))}
    </select>
  ),
}));

// Mock CronSchedule component
vi.mock('../../../CronSchedule/CronSchedule', () => ({
  __esModule: true,
  default: () => <div data-testid="cron-schedule">CronSchedule Component</div>,
}));

describe('ReportingGroup Component', () => {
  const mockLobList = [{ id: 1, name: 'Finance' }];
  const mockRegionList = [{ id: 1, name: 'North America' }];

  beforeEach(() => {
    const MetadataService = require('../../../services/MetadataService').default;
    MetadataService.getLobs.mockResolvedValue(mockLobList);
    MetadataService.getRegions.mockResolvedValue(mockRegionList);

    const AppUtils = require('../../../utils/AppUtils/AppUtils').default;
    AppUtils.toSelectMap.mockImplementation((list) =>
      list.map((item) => ({ value: item.id, label: item.name }))
    );
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('renders the component with all fields', async () => {
    render(<ReportingGroup />);

    // Check for headers and descriptions
    expect(screen.getByText('Reporting Group')).toBeInTheDocument();
    expect(
      screen.getByText(
        /Reporting groups allow you to receive consolidated emails for your rule instances/
      )
    ).toBeInTheDocument();

    // Wait for async operations to complete
    await waitFor(() => {
      // Check for input fields
      expect(screen.getByLabelText('Name')).toBeInTheDocument();
      expect(screen.getByLabelText('Roles')).toBeInTheDocument();
      expect(screen.getByLabelText('Region')).toBeInTheDocument();
      expect(screen.getByLabelText('Email List')).toBeInTheDocument();
      expect(screen.getByLabelText('Status')).toBeInTheDocument();
      expect(screen.getByLabelText('Schedule')).toBeInTheDocument();
    });

    // Check if Select components have options
    expect(screen.getAllByTestId('select')[0]).toHaveTextContent('Select line of business');
    expect(screen.getAllByTestId('select')[1]).toHaveTextContent('Select region');

    // Check if CronSchedule component is rendered
    expect(screen.getByTestId('cron-schedule')).toBeInTheDocument();
  });

  test('handles form value changes', async () => {
    render(<ReportingGroup />);

    // Simulate user input
    const nameInput = screen.getByLabelText('Name') as HTMLInputElement;
    nameInput.value = 'Test Reporting Group';
    nameInput.blur();

    // Wait for state updates
    await waitFor(() => {
      expect(nameInput.value).toBe('Test Reporting Group');
    });
  });
});
