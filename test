// ReportingGroup.test.tsx

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import ReportingGroup from './ReportingGroup';
import { useOktaAuth } from '@okta/okta-react';
import MetadataService from '../../../services/MetadataService';
import AppUtils from '../../../utils/AppUtils/AppUtils';

// Mock dependencies
jest.mock('@okta/okta-react', () => ({
  useOktaAuth: jest.fn(),
}));

jest.mock('../../../services/MetadataService', () => ({
  getLobs: jest.fn(),
  getRegions: jest.fn(),
}));

jest.mock('../../../utils/AppUtils/AppUtils', () => ({
  toSelectMap: jest.fn(),
}));

jest.mock('../../../CronSchedule/CronSchedule', () => () => <div>Mocked CronSchedule</div>);

describe('ReportingGroup Component', () => {
  beforeEach(() => {
    // Mock authentication state
    (useOktaAuth as jest.Mock).mockReturnValue({
      authState: { isAuthenticated: true },
    });

    // Mock MetadataService responses
    (MetadataService.getLobs as jest.Mock).mockResolvedValue([
      { id: 1, name: 'LOB 1' },
      { id: 2, name: 'LOB 2' },
    ]);

    (MetadataService.getRegions as jest.Mock).mockResolvedValue([
      { id: 'us-east-1', name: 'US East (N. Virginia)' },
      { id: 'us-west-2', name: 'US West (Oregon)' },
    ]);

    // Mock AppUtils.toSelectMap function
    (AppUtils.toSelectMap as jest.Mock).mockImplementation((list) =>
      list.map((item: any) => ({ value: item.id, label: item.name }))
    );
  });

  test('renders without crashing', async () => {
    render(<ReportingGroup />);

    expect(screen.getByText('Reporting Group')).toBeInTheDocument();

    // Wait for the useEffect to fetch data
    await waitFor(() => expect(MetadataService.getLobs).toHaveBeenCalled());
    await waitFor(() => expect(MetadataService.getRegions).toHaveBeenCalled());
  });

  test('displays form fields correctly', async () => {
    render(<ReportingGroup />);

    // Wait for options to be populated
    await waitFor(() => expect(AppUtils.toSelectMap).toHaveBeenCalledTimes(2));

    // Check for Name field
    expect(screen.getByLabelText('Name')).toBeInTheDocument();

    // Check for Line of Business field
    expect(screen.getByText('Roles')).toBeInTheDocument();

    // Check for Region field
    expect(screen.getByText('Region')).toBeInTheDocument();

    // Check for Email List field
    expect(screen.getByLabelText('Email List')).toBeInTheDocument();

    // Check for Status radio buttons
    expect(screen.getByLabelText('Active')).toBeInTheDocument();
    expect(screen.getByLabelText('Inactive')).toBeInTheDocument();

    // Check for CronSchedule component
    expect(screen.getByText('Mocked CronSchedule')).toBeInTheDocument();
  });

  test('handles form input changes', async () => {
    render(<ReportingGroup />);

    // Simulate entering Name
    const nameInput = screen.getByLabelText('Name') as HTMLInputElement;
    fireEvent.blur(nameInput, { target: { value: 'Test Reporting Group' } });
    expect(nameInput.value).toBe('Test Reporting Group');

    // Simulate selecting Line of Business
    const lobSelect = screen.getByLabelText('Roles');
    fireEvent.keyDown(lobSelect, { key: 'ArrowDown' });
    fireEvent.click(screen.getByText('LOB 1'));
    expect(screen.getByText('LOB 1')).toBeInTheDocument();

    // Simulate selecting Region
    const regionSelect = screen.getByLabelText('Region');
    fireEvent.keyDown(regionSelect, { key: 'ArrowDown' });
    fireEvent.click(screen.getByText('US East (N. Virginia)'));
    expect(screen.getByText('US East (N. Virginia)')).toBeInTheDocument();

    // Simulate entering Email List
    const emailListInput = screen.getByLabelText('Email List') as HTMLInputElement;
    fireEvent.blur(emailListInput, { target: { value: 'user@example.com' } });
    expect(emailListInput.value).toBe('user@example.com');

    // Simulate selecting Status
    const activeRadio = screen.getByLabelText('Active') as HTMLInputElement;
    fireEvent.click(activeRadio);
    expect(activeRadio.checked).toBe(true);

    const inactiveRadio = screen.getByLabelText('Inactive') as HTMLInputElement;
    fireEvent.click(inactiveRadio);
    expect(inactiveRadio.checked).toBe(true);
    expect(activeRadio.checked).toBe(false);
  });
});
