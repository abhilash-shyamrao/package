#!/usr/bin/env python3
import random
import sys

def fuzzer(starter_seed, prng_seed, iterations):
    # Ensure deterministic behavior
    random.seed(prng_seed)

    # Convert the seed input into a mutable list of characters
    mutated_seed = list(starter_seed)
    iteration_counter = 0

    for _ in range(iterations):
        iteration_counter += 1

        # Mutate each byte with a 13% probability
        for i in range(len(mutated_seed)):
            if random.randint(0, 100) <= 13:
                mutated_seed[i] = chr(random.randint(0, 255))

        # Append 10 random characters every 500 iterations
        if iteration_counter == 500:
            for _ in range(10):
                mutated_seed.append(chr(random.randint(0, 255)))
            iteration_counter = 0  # Reset counter

    # Convert the mutated list back to a string
    output = "".join(mutated_seed)
    print(output)  # Output to stdout for piping

if __name__ == "__main__":
    # Ensure proper arguments
    if len(sys.argv) != 3:
        print("Usage: ./fuzzer <prng_seed> <iterations>", file=sys.stderr)
        sys.exit(1)

    prng_seed = int(sys.argv[1])
    iterations = int(sys.argv[2])

    # Read the seed file
    try:
        with open("_seed_", "r") as seed_file:
            starter_seed = seed_file.read().strip()
    except FileNotFoundError:
        print("Error: Seed file '_seed_' not found.", file=sys.stderr)
        sys.exit(1)

    # Run the fuzzer
    fuzzer(starter_seed, prng_seed, iterations)
