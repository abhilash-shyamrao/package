import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { vi } from 'vitest';
import ReportingGroup from './ReportingGroup';
import { MetadataService } from '../../../../services/MetadataService/MetadataService';
import AppUtils from '../../../../../utils/AppUtils';

// Mock dependencies
vi.mock('@okta/okta-react', () => ({
  useOktaAuth: () => ({
    authState: { token: 'test' }
  })
}));

vi.mock('../../../CronSchedule/CronSchedule', () => ({
  default: () => <div>CronSchedule Component</div>
}));

vi.mock('../../../../../utils/AppUtils', () => ({
  toSelectMap: (items: any[]) => items.map(item => ({ label: item, value: item }))
}));

describe('ReportingGroup Component', () => {
  beforeEach(() => {
    vi.resetAllMocks();
    vi.spyOn(MetadataService, 'getLobs').mockResolvedValue(['vgi-platform-int']);
    vi.spyOn(MetadataService, 'getRegions').mockResolvedValue(['us-east-1']);
  });

  test('renders without crashing and displays components correctly', async () => {
    render(<ReportingGroup />);
    await waitFor(() => {
      expect(screen.getByText('Reporting Groups')).toBeDefined();
      expect(screen.getByText('CronSchedule Component')).toBeDefined();
    });
  });

  test('should initialize with correct initial state', () => {
    const { container } = render(<ReportingGroup />);
    const nameInput = container.querySelector('#name') as HTMLInputElement;
    const descriptionInput = container.querySelector('#description') as HTMLInputElement;
    expect(nameInput.value).toBe('');  // Initial value empty
    expect(descriptionInput.value).toBe('');  // Initial value empty
  });

  test('should update name field on input', async () => {
    const { container } = render(<ReportingGroup />);
    const nameInput = container.querySelector('#name') as HTMLInputElement;
    await userEvent.type(nameInput, 'Test name');
    expect(nameInput.value).toBe('Test name');
  });

  test('should update description field on input', async () => {
    const { container } = render(<ReportingGroup />);
    const descriptionInput = container.querySelector('#description') as HTMLInputElement;
    await userEvent.type(descriptionInput, 'Test description');
    expect(descriptionInput.value).toBe('Test description');
  });

  test('should handle onBlur and trigger onChange when inputs lose focus', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    
    const nameInput = container.querySelector('#name') as HTMLInputElement;
    await userEvent.type(nameInput, 'New name');
    nameInput.blur();  // Trigger onBlurChange by losing focus
    
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      name: 'New name'
    }));
  });

  test('should handle LoB dropdown selection change', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    const lobDropdown = container.querySelector('#lob div[class*=-control]') as any;
    await userEvent.click(lobDropdown);
    const lobOption = container.querySelectorAll('div[class*=-option]') as any;
    await userEvent.click(lobOption[0]);
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      lob: 'vgi-platform-int'
    }));
  });

  test('should handle region dropdown selection change', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    const regionDropdown = container.querySelector('#region div[class*=-control]') as any;
    await userEvent.click(regionDropdown);
    const regionOption = container.querySelectorAll('div[class*=-option]') as any;
    await userEvent.click(regionOption[0]);
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      region: 'us-east-1'
    }));
  });

  test('should update and trigger onBlur when status radio button is changed to Active', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    
    const activeRadio = container.querySelector('#active-status') as HTMLInputElement;
    await userEvent.click(activeRadio);
    activeRadio.blur();  // Trigger onBlurChange
    
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      status: 'Active'
    }));
  });

  test('should update and trigger onBlur when status radio button is changed to Inactive', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    
    const inactiveRadio = container.querySelector('#inactive-status') as HTMLInputElement;
    await userEvent.click(inactiveRadio);
    inactiveRadio.blur();  // Trigger onBlurChange
    
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      status: 'Inactive'
    }));
  });

  test('should render the CronSchedule component correctly', async () => {
    render(<ReportingGroup />);
    await waitFor(() => {
      expect(screen.getByText('CronSchedule Component')).toBeDefined();
    });
  });

  test('should handle empty LoB and region lists gracefully', async () => {
    vi.spyOn(MetadataService, 'getLobs').mockResolvedValue([]);
    vi.spyOn(MetadataService, 'getRegions').mockResolvedValue([]);
    
    render(<ReportingGroup />);
    
    await waitFor(() => {
      expect(screen.getByPlaceholderText('Select line of business')).toBeDefined();
      expect(screen.getByPlaceholderText('Select region')).toBeDefined();
    });
  });

  test('should handle form data passed through props', async () => {
    const initialData = {
      "reporting-groups": {
        name: 'Initial name',
        description: 'Initial description',
        status: 'Active',
        region: 'us-east-1',
        lob: 'vgi-platform-int'
      }
    };
    
    render(<ReportingGroup data={initialData} />);
    
    await waitFor(() => {
      expect(screen.getByDisplayValue('Initial name')).toBeDefined();
      expect(screen.getByDisplayValue('Initial description')).toBeDefined();
      expect(screen.getByDisplayValue('Active')).toBeDefined();
      expect(screen.getByDisplayValue('us-east-1')).toBeDefined();
    });
  });

  test('should call onInputChange for text fields and dropdowns', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    
    const nameInput = container.querySelector('#name') as HTMLInputElement;
    await userEvent.type(nameInput, 'New Name');
    expect(nameInput.value).toBe('New Name');
    nameInput.blur();

    const lobDropdown = container.querySelector('#lob div[class*=-control]') as any;
    await userEvent.click(lobDropdown);
    const lobOption = container.querySelectorAll('div[class*=-option]') as any;
    await userEvent.click(lobOption[0]);
    
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      name: 'New Name',
      lob: 'vgi-platform-int'
    }));
  });

  test('should update state when Select component is updated', async () => {
    const onChangeMock = vi.fn();
    const { container } = render(<ReportingGroup onChange={onChangeMock} />);
    
    const lobDropdown = container.querySelector('#lob div[class*=-control]') as any;
    await userEvent.click(lobDropdown);
    const lobOption = container.querySelectorAll('div[class*=-option]')[0];
    await userEvent.click(lobOption);
    
    expect(onChangeMock).toHaveBeenCalled();
    expect(onChangeMock).toHaveBeenCalledWith('reporting-groups', expect.objectContaining({
      lob: 'vgi-platform-int',
    }));
  });
});
