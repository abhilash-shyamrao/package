import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi, MockedFunction } from 'vitest';
import ReportingGroup from './ReportingGroup';
import { useOktaAuth } from '@okta/okta-react';
import { OktaAuth } from '@okta/okta-auth-js';
import MetadataService from '../../../services/MetadataService';
import AppUtils from '../../../utils/AppUtils/AppUtils';

// Mock dependencies
vi.mock('@okta/okta-react', () => ({
  useOktaAuth: vi.fn(),
}));

vi.mock('../../../services/MetadataService', () => ({
  default: {
    getLobs: vi.fn(),
    getRegions: vi.fn(),
  },
}));

vi.mock('../../../utils/AppUtils/AppUtils', () => ({
  default: {
    toSelectMap: vi.fn(),
  },
}));

vi.mock('../../../CronSchedule/CronSchedule', () => ({
  default: () => <div>CronSchedule Component</div>,
}));

describe('ReportingGroup Component', () => {
  beforeEach(() => {
    vi.resetAllMocks();

    // Mock useOktaAuth to return an object with authState and oktaAuth
    const mockedUseOktaAuth = useOktaAuth as MockedFunction<typeof useOktaAuth>;

    // Provide a minimal mock of OktaAuth
    const mockOktaAuth = {
      tokenManager: {},
      // Add any minimal required methods or properties here if needed
    } as unknown as OktaAuth;

    mockedUseOktaAuth.mockReturnValue({
      authState: {},
      oktaAuth: mockOktaAuth,
    });
  });

  test('renders without crashing', async () => {
    // Mock getLobs and getRegions
    (MetadataService.getLobs as MockedFunction<typeof MetadataService.getLobs>).mockResolvedValue([]);
    (MetadataService.getRegions as MockedFunction<typeof MetadataService.getRegions>).mockResolvedValue([]);

    // Mock AppUtils.toSelectMap
    (AppUtils.toSelectMap as MockedFunction<typeof AppUtils.toSelectMap>).mockReturnValue([]);

    render(<ReportingGroup />);

    // Check if component renders
    expect(screen.getByText('Reporting Group')).toBeInTheDocument();
  });

  test('fetches lobList and regionList on mount', async () => {
    const mockLobs = [{ id: 1, name: 'LOB1' }];
    const mockRegions = [{ id: 1, name: 'Region1' }];

    // Mock getLobs and getRegions
    (MetadataService.getLobs as MockedFunction<typeof MetadataService.getLobs>).mockResolvedValue(mockLobs);
    (MetadataService.getRegions as MockedFunction<typeof MetadataService.getRegions>).mockResolvedValue(mockRegions);

    // Mock AppUtils.toSelectMap
    (AppUtils.toSelectMap as MockedFunction<typeof AppUtils.toSelectMap>).mockImplementation((list) =>
      list.map((item) => ({ value: item.id, label: item.name }))
    );

    render(<ReportingGroup />);

    // Wait for useEffect to complete
    await waitFor(() => {
      expect(MetadataService.getLobs).toHaveBeenCalled();
      expect(MetadataService.getRegions).toHaveBeenCalled();
    });

    // Check if options are rendered in Select components
    const lobSelect = screen.getByLabelText('Roles');
    fireEvent.focus(lobSelect);
    fireEvent.keyDown(lobSelect, { key: 'ArrowDown', code: 'ArrowDown' });

    await waitFor(() => {
      expect(screen.getByText('LOB1')).toBeInTheDocument();
    });
  });

  test('handles input changes correctly', async () => {
    // Mock getLobs and getRegions
    (MetadataService.getLobs as MockedFunction<typeof MetadataService.getLobs>).mockResolvedValue([]);
    (MetadataService.getRegions as MockedFunction<typeof MetadataService.getRegions>).mockResolvedValue([]);

    // Mock AppUtils.toSelectMap
    (AppUtils.toSelectMap as MockedFunction<typeof AppUtils.toSelectMap>).mockReturnValue([]);

    render(<ReportingGroup />);

    // Simulate entering name
    const nameInput = screen.getByLabelText('Name');
    fireEvent.blur(nameInput, { target: { value: 'Test Reporting Group' } });

    // Simulate entering email list
    const emailInput = screen.getByLabelText('Email List');
    fireEvent.blur(emailInput, { target: { value: 'test@example.com' } });

    // Additional assertions can be added here to check if state updates as expected
  });
});
